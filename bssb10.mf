% Computer Modern Sans Serif Bold Slanted Extended 10 pt
% Compiled by Miroslav Broz 10 Feb 1999.
% This file contains parameters from CSSBX10, but slant:=.25.
% Files CSCODE, KMROMAN are included and modified.
% The letters "a","a" with acute,"a" with grave,"a" with trema are redefined.
% Greek lower case character codes are changed to fit in code table.

if unknown cmbase: input cmbase fi

font_identifier:="BSSB"; font_size 10pt#;

u#:=22/36pt#;      % unit width
width_adj#:=22/36pt#;    % width adjustment for certain characters
serif_fit#:=-9/36pt#;    % extra sidebar near lowercase serifs
cap_serif_fit#:=-11/36pt#;  % extra sidebar near uppercase serifs
letter_fit#:=0pt#;    % extra space added to all sidebars

body_height#:=270/36pt#;  % height of tallest characters
asc_height#:=250/36pt#;    % height of lowercase ascenders
cap_height#:=250/36pt#;    % height of caps
fig_height#:=250/36pt#;    % height of numerals
x_height#:=165/36pt#;    % height of lowercase without ascenders
math_axis#:=90/36pt#;    % axis of symmetry for math symbols
bar_height#:=90/36pt#;    % height of crossbar in lowercase e
comma_depth#:=38/36pt#;    % depth of comma below baseline
desc_depth#:=70/36pt#;    % depth of lowercase descenders

crisp#:=26/36pt#;    % diameter of serif corners
tiny#:=26/36pt#;    % diameter of rounded corners
fine#:=9/36pt#;      % diameter of sharply rounded corners
thin_join#:=9/36pt#;    % width of extrafine details
hair#:=49/36pt#;    % lowercase hairline breadth
stem#:=49/36pt#;    % lowercase stem breadth
curve#:=49/36pt#;    % lowercase curve breadth
ess#:=43/36pt#;      % breadth in middle of lowercase s
flare#:=40/36pt#;    % diameter of bulbs or breadth of terminals
dot_size#:=47/36pt#;    % diameter of dots
cap_hair#:=49/36pt#;    % uppercase hairline breadth
cap_stem#:=53/36pt#;    % uppercase stem breadth
cap_curve#:=53/36pt#;    % uppercase curve breadth
cap_ess#:=51/36pt#;    % breadth in middle of uppercase s
rule_thickness#:=30/36pt#;  % thickness of lines in math symbols

dish#:=0pt#;      % amount erased at top or bottom of serifs
bracket#:=0pt#;      % vertical distance from serif base to tangent
jut#:=0pt#;      % protrusion of lowercase serifs
cap_jut#:=0pt#;      % protrusion of uppercase serifs
beak_jut#:=0pt#;    % horizontal protrusion of beak serifs
beak#:=1.5/36pt#;    % vertical protrusion of beak serifs
vair#:=26/36pt#;    % vertical diameter of hairlines
notch_cut#:=49/36pt#;    % maximum breadth above or below notches
bar#:=26/36pt#;      % lowercase bar thickness
slab#:=36/36pt#;    % serif and arm thickness
cap_bar#:=34/36pt#;    % uppercase bar thickness
cap_band#:=31/36pt#;    % uppercase thickness above/below lobes
cap_notch_cut#:=45/36pt#;  % max breadth above/below uppercase notches
serif_drop#:=2/36pt#;    % vertical drop of sloped serifs
stem_corr#:=1/36pt#;    % for small refinements of stem breadth
vair_corr#:=2/36pt#;    % for small refinements of hairline height
apex_corr#:=18/36pt#;    % extra width at diagonal junctions

o#:=8/36pt#;      % amount of overshoot for curves
apex_o#:=0pt#;      % amount of overshoot for diagonal junctions

slant:=.25;      % tilt ratio $(\Delta x/\Delta y)$
fudge:=.88;      % factor applied to weights of heavy characters
math_spread:=.5;    % extra openness of math symbols
superness:=3/4;      % parameter for superellipses
superpull:=1/18;    % extra openness inside bowls
beak_darkness:=0;    % fraction of triangle inside beak serifs
ligs:=2;      % level of ligatures to be included

square_dots:=true;    % should dots be square?
hefty:=true;      % should we try hard not to be overweight?
serifs:=false;      % should serifs and bulbs be attached?
monospace:=false;    % should all characters have the same width?
variant_g:=true;    % should an italic-style g be used?
low_asterisk:=false;    % should the asterisk be centered at the axis?
math_fitting:=false;    % should math-mode spacing be used?

% This is an auxiliary file which prepares reading a CM
% parametric file using method of
% Bogus\l{}aw Jackowski \& Marek Ry\'cko
% ---------------------------------------------------------------------------
% This file belongs to the public domain under conditions similar to
% those of D. E. Knuth specified for the Computer Modern family of fonts.
% 

if unknown cmbase: input cmbase fi

% the following codes correspond to the ISO-Latin2
numeric lowc[];
cs_shift = 0; cs_uc = -32;
%
for $=225,232,239,236,224,252,237,249,229,197,246,242,243,244,228,248,
     185,187,250,233,253,190,184:  lowc[$+cs_uc]=$+cs_shift;
endfor
lowc[181]:=229;
lowc[169]:=185;
lowc[171]:=187;
lowc[174]:=190;
%
      cs_aa =225+cs_shift; cs_AA=cs_aa+cs_uc;
      cs_cz =232+cs_shift; cs_CZ=cs_cz+cs_uc;
      cs_dj =239+cs_shift; cs_DJ=cs_dj+cs_uc;
      cs_ie =236+cs_shift; cs_IE=cs_ie+cs_uc;
      cs_rr =224+cs_shift; cs_RR=cs_rr+cs_uc;
      cs_ue =252+cs_shift; cs_UE=cs_ue+cs_uc;
      cs_ii =237+cs_shift; cs_II=cs_ii+cs_uc;
      cs_ou =249+cs_shift; cs_OU=cs_ou+cs_uc;
      cs_ll =229+cs_shift; cs_LL=181;
      cs_lj =197+cs_shift; cs_LJ=cs_lj+cs_uc;
      cs_oe =246+cs_shift; cs_OE=cs_oe+cs_uc;
      cs_nj =242+cs_shift; cs_NJ=cs_nj+cs_uc;
      cs_oo =243+cs_shift; cs_OO=cs_oo+cs_uc;
      cs_uo =244+cs_shift; cs_UO=cs_uo+cs_uc;
      cs_ae =228+cs_shift; cs_AE=cs_ae+cs_uc;
      cs_rz =248+cs_shift; cs_RZ=cs_rz+cs_uc;
      cs_sh =185+cs_shift; cs_SH=169;
      cs_tj =187+cs_shift; cs_TJ=171;
      cs_uu =250+cs_shift; cs_UU=cs_uu+cs_uc;
      cs_ee =233+cs_shift; cs_EE=cs_ee+cs_uc;
      cs_yy =253+cs_shift; cs_YY=cs_yy+cs_uc;
      cs_zh =190+cs_shift; cs_ZH=174;

      cs_ax =184+cs_shift; cs_AX=cs_ax+cs_uc;  % !!!! toto nevim kam umistit
% additional characters

 single_opening_quote:=240; % ,
 single_closing_quote:=241; % `
 opening_quotes:=254;       % ,,
 closing_quotes:=255;       % ``
 french_opening_quotes:=158; % <<
 french_closing_quotes:=159; % >>
 oneperthousand:=141; %.
 ogonek:=157;
 cs_hyph = 156;  %% ^^c4(Ä) ÄÄ> ^^9c in *.tcp is recommended

%
% % the following codes correspond to the Cork scheme
% numeric lowc[];
% cs_shift = 128; cs_uc = -32;
%
% for $=97,66,35,36,37,47,71,124,109,55,40,41,118,44,115,116,100,48,50,
%     52,122,86,105,88,125,58: lowc[$+cs_shift+cs_uc]=$+cs_shift;
% endfor
%
% cs_aa = 97+cs_shift; cs_AA=cs_aa+cs_uc;
% cs_qb = 66+cs_shift;%
% cs_cz = 35+cs_shift; cs_CZ=cs_cz+cs_uc;
% cs_dj = 36+cs_shift; cs_DJ=cs_dj+cs_uc;
% cs_ie = 37+cs_shift; cs_IE=cs_ie+cs_uc;
% cs_rr = 47+cs_shift; cs_RR=cs_rr+cs_uc;
% cs_qg = 71+cs_shift;%
% cs_ue = 124+cs_shift; cs_UE=cs_ue+cs_uc;
% cs_ii = 109+cs_shift; cs_II=cs_ii+cs_uc;
% cs_ou = 55+cs_shift; cs_OU=cs_ou+cs_uc;
% cs_ll = 40+cs_shift; cs_LL=cs_ll+cs_uc;
% cs_lj = 41+cs_shift; cs_LJ=cs_lj+cs_uc;
% cs_oe = 118+cs_shift; cs_OE=cs_oe+cs_uc;
% cs_nj = 44+cs_shift; cs_NJ=cs_nj+cs_uc;
% cs_oo = 115+cs_shift; cs_OO=cs_oo+cs_uc;
% cs_uo = 116+cs_shift; cs_UO=cs_uo+cs_uc;
% cs_ae = 100+cs_shift; cs_AE=cs_ae+cs_uc;
% cs_rz = 48+cs_shift; cs_RZ=cs_rz+cs_uc;
% cs_sh = 50+cs_shift; cs_SH=cs_sh+cs_uc;
% cs_tj = 52+cs_shift; cs_TJ=cs_tj+cs_uc;
% cs_uu = 122+cs_shift; cs_UU=cs_uu+cs_uc;
% cs_qv = 86+cs_shift;%
% cs_ee = 105+cs_shift; cs_EE=cs_ee+cs_uc;
% cs_ax = 88+cs_shift; cs_AX=cs_ax+cs_uc;
% cs_yy = 125+cs_shift; cs_YY=cs_yy+cs_uc;
% cs_zh = 58+cs_shift;  cs_ZH=cs_zh+cs_uc;

% % additional characters

% single_opening_quote:=240; % ,
% single_closing_quote:=241; % `
% opening_quotes:=254;       % ,,
% closing_quotes:=255;       % ``
% french_opening_quotes:=248; % <<
% french_closing_quotes:=249; % >>
% oneperthousand:=141; %.
% ogonek:=157;
% cs_hyph = 156;  %% ^^c4(Ä) ÄÄ> ^^9c in *.tcp is recommended

if unknown improve_kerns: boolean improve_kerns; improve_kerns=true; fi;

string driver_name;
driver_name:=str roman;

% The proportion of |vair/stem| depends drastically on resolution;
% e.g., for 300 dpi cmbx10 |vair=1| and |stem=5|, for 746 dpi cmbx10
% (300 dpi, magstep 5) |vair=4| and |stem=12|, while, sharply speaking,
% |stem#/vair#=3.15381|; hence a new variable |xvair| has been introduced
% to be used in some crucial places instead of |vair|.
vardef xvair = stem*vair#/stem# enddef;

%%% italcorr corrital
% correction of italic correction (cf. D. E. Knuth, The \MF{}book, p. 105):
vardef corrital z suffix $ =
% |z$| is the rightmost position of a pen (in accent path)
 if not monospace:
  save charic_; charic_=(rt(x$)-r)/hppp+slant*y$/vppp+.5u#;
  if charic_>charic: charic:=charic_; fi
%| else: %| |charic=mono_charic#|, do nothing
 fi
enddef;

% The Computer Modern Roman family of fonts (by D. E. Knuth, 1979--1985)
% 8-bit characters with Czech accents (Petr Novak) 
% revised and edited 1992-93 (Karel Horak)
% european quotes and special hyphenchar added

if ligs>1: font_coding_scheme:="TeX cs text";
 spanish_shriek=oct"074"; spanish_query=oct"076";
else: font_coding_scheme:=if ligs=0: "TeX cs typewriter text"
  else: "TeX cs text without f-ligatures" fi;
 spanish_shriek=oct"016"; spanish_query=oct"017"; fi

mode_setup; font_setup;

input romanu;  % upper case (majuscules)
input romanl;  % lower case (minuscules)
input greeku;  % upper case Greek letters
input romand;  % numerals
input romanp;  % ampersand, question marks, currency sign
input romspl;  % lowercase specials (dotless \i, ligature \ae, etc.)
input romspu;  % uppercase specials (\AE, \OE, \O)
input punct;  % punctuation symbols common to roman and italic text
input accent;  % accents common to roman and italic text

% Czech accented letters
if unknown acute_sharp: boolean acute_sharp; acute_sharp:=false; fi
if unknown hach_sharp: boolean hach_sharp; hach_sharp:=false; fi

input csaccent;  % czech and slovak accents definitions
input csacutl; % lowercase letters with acute accent
input csacutu; % uppercase letters with acute accent
input cshachel; % lowercase letters with hachek accent
input cshacheu; % uppercase letters with hachek accent
input csotherl; % lowercase letters with other accents
input csotheru; % uppercase letters with other accents
input csadded; % european quotes, oneperthousand
input cshyph;  % allows made \hyphenchar\font=156

% Redefinitions of the letters "a"

cmchar "The letter a";
beginchar("a",9u#,x_height#,0);
%italcorr asc_height#*slant-serif_fit#+.5stem#-2u#;
%italcorr x_height#*slant-.2u#;
italcorr x_height#*slant+.25u#;
adjust_fit(0,serif_fit#);
pickup tiny.nib; pos1(stem',0); pos2(stem,0);
pos0'(stem',0); pos0(stem,0); z0r=z0'r; x0'=x1; x0=x2;
rt x1r=hround(w-2u+.5stem'); top y1=x_height-oo;  %% w-2.5u
numeric edge; edge=lft x2l;
pickup fine.nib; pos3(if hefty:thin_join else: hair fi,0);
pos4(vair,90); pos5(curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
lft x3l=min(lft x3l-(rt x3r-tiny.rt x2r),1/3[lft x2,edge]);
y3=2/8[bar_height,x_height];    %% 1/8
x4l=.5(w-serif_fit)-.3u; top y4r=x_height+oo;
lft x5r=hround max(1.35u-.5curve,.6u); y5=.5x_height;
x6l=x4l-.2u; bot y6r=-oo;
x7=x3; y7=min(y3,y6+y4-y3+.6vair);
(x,y4r)=whatever[z3l,z4l]; x4r:=max(x,.5[x5r,x4]);
(x',y6r)=whatever[z7l,z6l]; x6r:=max(x',.5[x5r,x6]);
% filldraw stroke z3e{up}...pulled_arc.e(4,5)
z8=(x1,y4l); pos8(vair,90);
filldraw stroke z8e{left}...pulled_arc.e(4,5)
 & pulled_arc.e(5,6)...{up}z7e; % bowl
y0=ypart(((edge,h)--(edge,0))intersectionpoint(z3l{up}...{left}z4l));
pickup tiny.nib; bot y2=if serifs:-min(oo,serif_drop) else: 0 fi;
filldraw stroke z1e--z0'e--z0e--z2e;  % stem
if serifs: sloped_serif.l(1,0',a,1/3,jut,serif_drop);  % upper serif
 sloped_serif.r(2,0,b,1/3,jut,min(oo,serif_drop)); fi  % lower serif
penlabels(0,1,2,3,4,5,6,7,8); endchar;

cmchar "The letter a with acute";
beginchar(cs_aa,9u#,lc_acute_height#,0);
%italcorr asc_height#*slant-serif_fit#+.5stem#-2u#;
%italcorr x_height#*slant-.2u#;
italcorr x_height#*slant+.25u#;
adjust_fit(0,serif_fit#);
pickup tiny.nib; pos1(stem',0); pos2(stem,0);
pos0'(stem',0); pos0(stem,0); z0r=z0'r; x0'=x1; x0=x2;
rt x1r=hround(w-2u+.5stem'); top y1=x_height-oo;  %% w-2.5u
numeric edge; edge=lft x2l;
pickup fine.nib; pos3(if hefty:thin_join else: hair fi,0);
pos4(vair,90); pos5(curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
lft x3l=min(lft x3l-(rt x3r-tiny.rt x2r),1/3[lft x2,edge]);
y3=2/8[bar_height,x_height];    %% 1/8
x4l=.5(w-serif_fit)-.3u; top y4r=x_height+oo;
lft x5r=hround max(1.35u-.5curve,.6u); y5=.5x_height;
x6l=x4l-.2u; bot y6r=-oo;
x7=x3; y7=min(y3,y6+y4-y3+.6vair);
(x,y4r)=whatever[z3l,z4l]; x4r:=max(x,.5[x5r,x4]);
(x',y6r)=whatever[z7l,z6l]; x6r:=max(x',.5[x5r,x6]);
% filldraw stroke z3e{up}...pulled_arc.e(4,5)
z8=(x1,y4l); pos8(vair,90);
filldraw stroke z8e{left}...pulled_arc.e(4,5)
 & pulled_arc.e(5,6)...{up}z7e; % bowl
y0=ypart(((edge,h)--(edge,0))intersectionpoint(z3l{up}...{left}z4l));
pickup tiny.nib; bot y2=if serifs:-min(oo,serif_drop) else: 0 fi;
filldraw stroke z1e--z0'e--z0e--z2e;  % stem
if serifs: sloped_serif.l(1,0',a,1/3,jut,serif_drop);  % upper serif
 sloped_serif.r(2,0,b,1/3,jut,min(oo,serif_drop)); fi  % lower serif
penlabels(0,1,2,3,4,5,6,7,8);
lc_acute_accent(x3-.25u);
%lc_acute_accent(x3+.75u);
endchar;

cmchar "The letter a with grave";
beginchar(cs_ax,9u#,lc_acute_height#,0);
%italcorr asc_height#*slant-serif_fit#+.5stem#-2u#;
%italcorr x_height#*slant-.2u#;
italcorr x_height#*slant+.25u#;
adjust_fit(0,serif_fit#);
pickup tiny.nib; pos1(stem',0); pos2(stem,0);
pos0'(stem',0); pos0(stem,0); z0r=z0'r; x0'=x1; x0=x2;
rt x1r=hround(w-2u+.5stem'); top y1=x_height-oo;  %% w-2.5u
numeric edge; edge=lft x2l;
pickup fine.nib; pos3(if hefty:thin_join else: hair fi,0);
pos4(vair,90); pos5(curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
lft x3l=min(lft x3l-(rt x3r-tiny.rt x2r),1/3[lft x2,edge]);
y3=2/8[bar_height,x_height];    %% 1/8
x4l=.5(w-serif_fit)-.3u; top y4r=x_height+oo;
lft x5r=hround max(1.35u-.5curve,.6u); y5=.5x_height;
x6l=x4l-.2u; bot y6r=-oo;
x7=x3; y7=min(y3,y6+y4-y3+.6vair);
(x,y4r)=whatever[z3l,z4l]; x4r:=max(x,.5[x5r,x4]);
(x',y6r)=whatever[z7l,z6l]; x6r:=max(x',.5[x5r,x6]);
% filldraw stroke z3e{up}...pulled_arc.e(4,5)
z8=(x1,y4l); pos8(vair,90);
filldraw stroke z8e{left}...pulled_arc.e(4,5)
 & pulled_arc.e(5,6)...{up}z7e; % bowl
y0=ypart(((edge,h)--(edge,0))intersectionpoint(z3l{up}...{left}z4l));
pickup tiny.nib; bot y2=if serifs:-min(oo,serif_drop) else: 0 fi;
filldraw stroke z1e--z0'e--z0e--z2e;  % stem
if serifs: sloped_serif.l(1,0',a,1/3,jut,serif_drop);  % upper serif
 sloped_serif.r(2,0,b,1/3,jut,min(oo,serif_drop)); fi  % lower serif
penlabels(0,1,2,3,4,5,6,7,8);
lc_grave_accent(x3-.25u);
%lc_grave_accent(x3+.75u);
endchar;

cmchar "The letter a with trema";
beginchar(cs_ae,9u#,lc_trema_height#,0);
%italcorr asc_height#*slant-serif_fit#+.5stem#-2u#;
%italcorr x_height#*slant-.2u#;
italcorr x_height#*slant+.25u#;
adjust_fit(0,serif_fit#);
pickup tiny.nib; pos1(stem',0); pos2(stem,0);
pos0'(stem',0); pos0(stem,0); z0r=z0'r; x0'=x1; x0=x2;
rt x1r=hround(w-2u+.5stem'); top y1=x_height-oo;  %% w-2.5u
numeric edge; edge=lft x2l;
pickup fine.nib; pos3(if hefty:thin_join else: hair fi,0);
pos4(vair,90); pos5(curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
lft x3l=min(lft x3l-(rt x3r-tiny.rt x2r),1/3[lft x2,edge]);
y3=2/8[bar_height,x_height];    %% 1/8
x4l=.5(w-serif_fit)-.3u; top y4r=x_height+oo;
lft x5r=hround max(1.35u-.5curve,.6u); y5=.5x_height;
x6l=x4l-.2u; bot y6r=-oo;
x7=x3; y7=min(y3,y6+y4-y3+.6vair);
(x,y4r)=whatever[z3l,z4l]; x4r:=max(x,.5[x5r,x4]);
(x',y6r)=whatever[z7l,z6l]; x6r:=max(x',.5[x5r,x6]);
% filldraw stroke z3e{up}...pulled_arc.e(4,5)
z8=(x1,y4l); pos8(vair,90);
filldraw stroke z8e{left}...pulled_arc.e(4,5)
 & pulled_arc.e(5,6)...{up}z7e; % bowl
y0=ypart(((edge,h)--(edge,0))intersectionpoint(z3l{up}...{left}z4l));
pickup tiny.nib; bot y2=if serifs:-min(oo,serif_drop) else: 0 fi;
filldraw stroke z1e--z0'e--z0e--z2e;  % stem
if serifs: sloped_serif.l(1,0',a,1/3,jut,serif_drop);  % upper serif
 sloped_serif.r(2,0,b,1/3,jut,min(oo,serif_drop)); fi  % lower serif
penlabels(0,1,2,3,4,5,6,7,8);
lc_trema_accent(x4-2u,x4+2u);
%lc_trema_accent(x4-4u,x4);
endchar;

% Greek lower case with different character codes

% This lowercase Greek alphabet was prepared by D. E. Knuth in December, 1979,
% inspired by the Monotype faces used in {\sl The Art of Computer Programming}.
% (It has been designed for math formulas, not Greek texts.)
% The programs were revised for the new \MF\ conventions in 1985.

cmchar "Lowercase Greek alpha";
beginchar(oct"200",11u#,x_height#,0);
italcorr max(1/3x_height#*slant+.5hair#+.5u#,x_height#*slant-.5u#);
adjust_fit(0,0); pickup fine.nib;
pos0(hair,0); pos1(vair,-90); pos2(curve,-180); pos3(vair,-270);
z4=(w-3.25u,9/16h); z5=(w-2.75u,.5[vair,y4]);
numeric theta; theta=angle(z4-z5)-90;
pos4(stem,theta); pos5(stem,theta);
pos6(vair,90); pos7(hair,180);
rt x0r=hround(w-u); x1=x3=.5w-u; lft x2r=hround(1.5u-.5curve);
x6=w-u; x7+.5hair=hround(w+.5hair-epsilon);
top y0=vround .8[bar_height,h]; bot y1r=bot y6l=-oo;
y2=.5[y1,y3]; top y3r=h+oo; y7=1/4bar_height;
filldraw stroke z0e{down}...pulled_arc.e(1,2) & pulled_arc.e(2,3)
 ...z4e---z5e...z6e{right}...{up}z7e; % diagonal, bowl, and hook
math_fit(-.3x_height#*slant+.5curve#-u#,1/3x_height#*slant+.5hair#+.5u#);
penlabels(0,1,2,3,4,5,6,7); endchar;

cmchar "Lowercase Greek beta";
beginchar(oct"201",9.5u#,asc_height#,desc_depth#);
italcorr .5[x_height#,asc_height#]*slant-u#;
adjust_fit(0,0); pickup fine.nib;
pos0(hair,180); pos1(hair,180); pos2(vair,90);
pos3(stem,0); pos4(vair,-90); pos5(hair,-180);
pos6(vair,-270); pos7(curve,-360); pos8(vair,-450); pos9(hair,-540);
x0=x1=x9; lft x0l=hround(1.5u-.5hair); x2=x4=x6=x8=.5w+.25u;
rt x3r=hround(w-1.5u); rt x7r=hround(w-1.5u+.5curve); rt x5l=hround(x4-u);
bot y0=-d; y1=top y6r=x_height; top y2r=h+oo; y3=.5[y2,y4];
y5=.5[y4,y6]; top y6r-bot y4r=vstem+eps; bot y8=-oo; y7=y9=.5[y6,y8];
if y6l<y4l: y6l:=y4l:=y5; fi
filldraw stroke z0e---z1e...pulled_arc.e(2,3)
 & pulled_arc.e(3,4)...{up}z5e;  % stem and upper bowl
filldraw stroke z5e{up}...pulled_arc.e(6,7)
 & pulled_arc.e(7,8)...{up}z9e;  % lower bowl
math_fit(desc_depth#*slant+.5hair#-u#,.7x_height#*slant+.5curve#-1.5u#);
penlabels(0,1,2,3,4,5,6,7,8,9); endchar;

cmchar "Lowercase Greek gamma";
beginchar(oct"202",10u#,x_height#,desc_depth#);
italcorr x_height#*slant-.5u#;
adjust_fit(0,0); pickup fine.nib;
pos1(hair,180); pos2(vstem+dw,90);
pos4(hair,0); pos5(vair,-90); pos6(hair,-180); pos7(hair,-180);
bot y1=.5772156649h; top y2r=h+oo; y4=y6=-.5d;
bot y5r=-d-o; top y7=h;
lft x1r=hround(.5u-.5hair); x2=3u; rt x4r=hround(w-2u); x5=.5[x4,x6];
rt x4r-lft x6r=hround 1/3[hair,stem]+eps; rt x7l=hround(w-u);
if x4l<x6l: x4l:=x6l:=x5; fi
pos3(hair,angle(z4-z2)+90); x3=superness[x2,x4]; y3=superness[y4,y2];
filldraw stroke z1e{up}...z2e{right}...z3e{z4-z2}
 ...z4e{down}...{left}z5e; % arc
filldraw stroke z5e{left}...z6e{up}..{2(x7-x6),y7-y6}z7e;  % stem
math_fit(-.5772156649x_height#*slant,ic#-u#);
penlabels(1,2,3,4,5,6,7); endchar;

cmchar "Lowercase Greek delta";
beginchar(oct"203",8u#,asc_height#,0);
italcorr .9asc_height#*slant+.5hair#-1.5u#;
adjust_fit(0,0); pickup fine.nib;
pos1(hair,-180); pos2(vair,-90);
numeric theta; theta=angle(18u,-h);
pos3(stem,theta+90); pos4(stem,theta+90); pos5(1/4[hair,stem],20);
pos6(vair,-90); pos7(curve,-180); pos8(vair,-270);
rt x1l=hround(w-2u+.5hair); x2=.5w; x3r=3u; rt x5r=hround(w-u);
x4=x6=x8=.5w+.5u; lft x7r=hround(1.5u-.5curve);
top y2l=h+oo; y1=min(.9h,y2r-eps); top y8r=x_height+oo; y4=y8;
z4-z3=whatever*(18u,-h); y5=y7=.5[y6,y8]; bot y6=-oo;
filldraw stroke z1e{x2-x1,3(y2-y1)}...z2e{left}...z3e---z4e
 ....z5e{down}...pulled_arc.e(6,7) & pulled_arc.e(7,8);  % hook and bowl
math_fit(-.3x_height#*slant+.5curve#-u#,.7x_height#*slant-.5u#);
penlabels(1,2,3,4,5,6,7,8); endchar;

cmchar "Lowercase Greek epsilon";
beginchar(oct"204",8u#,x_height#,0);
italcorr x_height#*slant+.5hair#-2u#;
adjust_fit(0,0); pickup fine.nib;
pos0(bar,90); pos1(bar,90); pos2(curve,180);
pos3(vair,270); pos4(hair,300); pos6(bar,90); pos7(bar,90);
x1=.5w+.5u; x0=x1+u; lft x2r=hround(1.5u-.5curve); x3=.5[x0,x1];
x4r=good.x(w-u); x5=w+.5u; x6=x0; z7=z2l;
top y0r=top y1r=h; y2=y5=y6=bar_height; bot y3r=-oo;
path p; p=z3r{right}...{up}z5;
numeric t; t=ypart(((x4r,y3r)--(x4r,y5))intersectiontimes p);
y4r=ypart point t of p;
filldraw circ_stroke z0e..pulled_arc.e(1,2) & pulled_arc.e(2,3)
 ...z4e{direction t of p};  % arc
filldraw circ_stroke z6e--z7e;  % bar
math_fit(-.3x_height#*slant+.5curve#-u#,ic#);
penlabels(0,1,2,3,4,5,6,7); endchar;

cmchar "Lowercase Greek zeta";
beginchar(oct"205",9u#,asc_height#,desc_depth#);
italcorr .75[x_height#,asc_height#]*slant-1.5u#;
adjust_fit(0,0); pickup fine.nib;
pos0(hair,-360); pos1(vair,-270); pos2(hair,-180); pos3(vair,-90);
numeric theta; theta=90-angle(25u,x_height); slope:=-x_height/25u;
pos6(stem,theta); pos7(vair,-90); pos8(vair,-135);
lft x0l=hround 3.5u; x1=x3=.5[x0,x2]; rt x2l=hround max(rt x0r,w-2u)+eps;
top y0=h; top y3l=bot y1l+vstem+eps=vround(y0-.25(h-x_height)); y2=.5[y1,y3];
if y1r>y3r: y1r:=y3r:=y2; fi
lft x4l=hround u; x4r-x4l=(hround .6[vair,stem])-fine;
x6+.5u=x7=w-2u; x8=.5w+.75u;
y6=-.1d; y8=-3/4d-oo; bot y7r=-d-oo;
ellipse_set(3l,4l,5l,6l); ellipse_set(3r,4r,5r,6r);
y4l:=.9[y6,y4l]; y4=y4r:=.9[y6,y4r];
filldraw circ_stroke z0e{down}...z1e{right}...{up}z2e;  % opening hook
filldraw circ_stroke z8e{x7-x8,2(y7-y8)}...z7e{right}
 ...z6e---z5e....{up}z4e
 ..tension 1 and atleast1.5..{right}z3e...{down}z2e;  % main stroke
math_fit(-.2asc_height#*slant-.5u#,0);
penlabels(0,1,2,3,4,5,6,7,8); endchar;

cmchar "Lowercase Greek eta";
beginchar(oct"206",9u#,x_height#,desc_depth#);
italcorr .8x_height#*slant+.5stem#-u#;
adjust_fit(0,0); pickup fine.nib;
x0=0; x1=x2; pos2(stem,0); lft x2l=hround(2.5u-.5stem); y2-.5stem=-oo;
hook_in(0,a,1);  % opening hook
filldraw circ_stroke z2e--z1e;  % left stem
x4+.5stem=hround(w-1.5u+.5stem); ital_arch(2,3,4);  % arch
pos5(stem,0); x5=x4; y5-.5stem=-d-o;
filldraw circ_stroke z5e--z4e;  % right stem
math_fit(-2/3x_height#*slant+.5hair#+.5u#,ic#-1/3x_height#*slant);
penlabels(0,a,1,2,3,4,5); endchar;

cmchar "Lowercase Greek theta";
beginchar(oct"207",8.25u#,asc_height#,0);
italcorr .7asc_height#*slant+.5curve#-u#;
adjust_fit(0,0); pickup fine.nib;
pos1(vair,90); pos2(curve,180); pos3(vair,270); pos4(curve,360);
x1=x3=.5w; lft x2r=hround(1.5u-.5curve); x4=w-x2;
top y1r=h+oo; y2=y4=.5[y1,y3]; bot y3r=-oo;
filldraw stroke pulled_arc.e(1,2) & pulled_arc.e(2,3)
 & pulled_arc.e(3,4) & pulled_arc.e(4,1);  % bowl
pos2'(bar,90); pos4'(bar,90); z2'=z2l; z4'=z4l;
filldraw stroke z2'e--z4'e;  % bar
math_fit(-.3asc_height#*slant-u#+.5curve#,ic#-.5u#);
penlabels(1,2,3,4); endchar;

cmchar "Lowercase Greek iota";
beginchar(oct"210",5u#,x_height#,0);
italcorr 1/3x_height#*slant+.5hair#+.5u#;
adjust_fit(if monospace: u#,u# else: 0,0 fi); pickup fine.nib;
pos1(stem,0); lft x1l=hround(1.5u-.5stem); y1+.5stem=h+oo;
x2=x1-.25u; x4=w; hook_out(2,3,4)(skewed);  % closing hook
filldraw circ_stroke z1e{down}...{-u,-x_height}z2e;  % stem
math_fit(0,ic#); penlabels(1,2,3,4); endchar;

cmchar "Lowercase Greek kappa";
beginchar(oct"211",9u#,x_height#,0);
italcorr 1/3x_height#*slant+.5hair#+.5u#;
adjust_fit(0,0); pickup fine.nib;
pos1(stem,0); pos2(stem,0); pos3(vair,90); pos4(vair,90); pos5(flare,90);
x1=x2=x3; lft x1l=hround(1.5u-.5stem); y1+.5stem=h+oo; y2-.5stem=-oo;
filldraw z1l---z2l..z2r---z1r..cycle;  % stem
y3=bar_height; top y4r=h; x4+.5flare=hround(w-1.5u); z5r=z4r;
path p,q; p=z3l{right}..{right}z4l; q=z5r{right}..z5l{left}...cycle;
numeric t; t=ypart(p intersectiontimes q);
filldraw stroke z3e{right}..{right}z4e;  % upper diagonal
filldraw subpath(0,t) of q--cycle;  % bulb
pos7(stem,0); pos8(vair,90); pos9(hair,180);
x9+.5hair=hround(w+.5hair-epsilon); y9=1/3x_height;
lft x7l=hround(w-2.75u-.5stem); y7=1/2y3; x8=w-1.2u; bot y8l=-oo;
filldraw stroke z3e{right}...z7e{down}
 ...z8e{right}...{up}z9e;  % lower diagonal
math_fit(0,ic#); penlabels(1,2,3,4,5,7,8,9); endchar;

cmchar "Lowercase Greek lambda";
beginchar(oct"212",10.5u#,asc_height#,0);
adjust_fit(0,0); pickup fine.nib;
pos1(vair,90); lft x1=hround .1u; top y1r=h;
x2=x1+2u; y2=.7[x_height,h]; x3=w-2u; bot y4=-oo; y3=max(.07h,y4+eps);
z4-(.25u,0)=whatever[z2,z3]; numeric theta; theta=angle(z2-z3)-90;
pos2(stem,theta); pos3(stem,theta); pos4(stem,0);
filldraw circ_stroke z1e{right}...z2e---z3e
 ...{2(x4e-x3e),y4e-y3e}z4e;  % long diagonal
y5=.5[bar_height,x_height]; z5=whatever[z2,z3];
x6=1.5u; y6-.5stem=-oo; pos5(hair,theta-90); pos6(stem,angle(z5-z6)-90);
filldraw circ_stroke z6e--z5e; % short diagonal
penlabels(1,2,3,4,5,6); endchar;

cmchar "Lowercase Greek mu";
beginchar(oct"213",9u#,x_height#,desc_depth#);
italcorr 1/3x_height#*slant+.5hair#+.5u#;
adjust_fit(0,0); pickup fine.nib; interim superness:=more_super;
pos1(stem,-180); pos2(stem,-180); x1=x2=x3; lft x1r=hround(1.5u-.5stem);
y1+.5stem=h+oo; y2-.5stem=-d-o;
filldraw z1r---z2r..z2l---z1l..cycle;  % left stem
pos3(stem,-180); pos4(vair,-90); pos5(hair,0); x4=.5[x3,x5];
pos6(stem,0); rt x6r=hround(w-2.5u+.5stem);
x5=x6=x7; x9=w; hook_out(7,8,9);  % closing hook
y3=.7[y4,y5]; bot y4r=-oo; y5=.57h; y6+.5stem=h;
filldraw stroke super_arc.e(3,4)...{up}z5e; % left stem and arc
filldraw circ_stroke z6e--z7e;  % right stem
math_fit(desc_depth#*slant+.5stem#-u#,ic#);
penlabels(1,2,3,4,5,6,7,8,9); endchar;

cmchar "Lowercase Greek nu";
beginchar(oct"214",8.5u#,x_height#,0);
italcorr x_height#*slant+.5stem#-u#;
adjust_fit(0,0); pickup fine.nib;
pos3(vair,-90); pos4(stem,0); bot y3r=0; y4+.5stem=h+oo;
x3-.5stem=hround(1.5u-.5stem); x4+.5stem=hround(w-1.5u+.5stem);
filldraw circ_stroke z4e{down}...{-36u,-h}z3e;  % diagonal
pickup tiny.nib; pos1(stem,0); pos2(stem,0);
top y1=h+min(oo,serif_drop); bot y2=0; x1=x2=x3;
z=((z4{down}...{-36u,-h}z3)intersectionpoint((x2r,0)--(x2r,h)));
filldraw z1l--z2l--z--z1r--cycle;  % stem
sloped_serif.l(1,2,a,1/3,jut,serif_drop); % upper left serif
math_fit(0,ic#-1/3x_height#*slant-.5u#); penlabels(1,2,3,4); endchar;

cmchar "Lowercase Greek xi";
beginchar(oct"216",9u#,asc_height#,desc_depth#);
italcorr .75[x_height#,asc_height#]*slant-2u#;
adjust_fit(0,0); pickup fine.nib;
pos10(hair,-720); pos11(vair,-630); pos12(hair,-540); pos13(vair,-450);
lft x10l=hround 1/3w; x11=x13=.5[x10,x12]; rt x12l=hround(w-2.5u);
top y10=h; top y13l=bot y11l+vstem+eps=vround(y10-.25(h-x_height));
y12=.5[y11,y13]; if y11r>y13r: y11r:=y13r:=y12; fi
pos0(curve,-360); pos1(vair,-270); pos2(hair,-180); pos3(vair,-90);
numeric theta; theta=90-angle(22u,x_height); slope:=-x_height/22u;
pos6(stem,theta); pos7(vair,-90); pos8(vair,-135);
lft x0l=hround u; x1=x3=x11; x2=x12;
y0=.5[y13,y1]; top y3l=vround .5h=bot y1l+vstem+eps; y2=.5[y1,y3];
if y1r>y3r: y1r:=y3r:=y2; fi
lft x4l=hround u; x4r-x4l=hround .5[vair,stem]-fine;
x6=x7=w-2u; x8=.5w+.5u; y6=-.3d; bot y7r=-d-oo; y8=max(-3/4d-oo,y7l);
ellipse_set(3l,4l,5l,6l); ellipse_set(3r,4r,5r,6r);
y4l:=.9[y6,y4l]; y4=y4r:=.9[y6,y4r];
filldraw circ_stroke z10e{down}...z11e{right}...{up}z12e;  % opening hook
filldraw stroke z12e{up}...z13e{left}...z0e{down}
 ...z1e{right}...{up}z2e;  % upper arc
filldraw circ_stroke z8e{x7-x8,2(y7-y8)}...z7e{right}...z6e
 ---z5e...{up}z4e...{right}z3e...{down}z2e;  % main stroke
math_fit(-.2asc_height#*slant-.5u#,0);
penlabels(0,1,2,3,4,5,6,7,8,10,11,12,13); endchar;

cmchar "Lowercase Greek pi";
beginchar(oct"217",10u#,x_height#,0);
italcorr x_height#*slant+.5stem#-u#;
adjust_fit(0,0); pi_stroke; % hook and bar
pos4(hair,0); pos6(hair,0); x4=3.5u; x6=w-4u; y4=y6=y2;
x5=3u; x7=w-2.5u; y5=y7=.5stem-oo;
pair v[]; v1=(z4-z5) xscaled 3.14159; v2=(z6-z7) xscaled 3.14159;
pos5(stem,angle v1-90); pos7(stem,angle v2-90);
filldraw circ_stroke z5e{v1}...{up}z4e;  % left stem
filldraw circ_stroke z7e{v2}...{up}z6e;  % right stem
math_fit(-.7x_height#*slant+.5hair#+.5u#,ic#-1/3x_height#*slant);
penlabels(1,2,3,4,5,6,7); endchar;

cmchar "Lowercase Greek rho";
beginchar(oct"220",8.25u#,x_height#,desc_depth#);
italcorr .7x_height#*slant+.5curve#-u# if math_fitting:-.5u# fi;
adjust_fit(0,0); pickup fine.nib;
pos1(stem,180); pos2(stem,180); pos3(vair,90);
pos4(curve,0); pos5(vair,-90); pos6(hair,-180);
lft x2r=hround(1.5u-.5stem); x1=x2=x6; x3=x5=.5[x2,x4];
rt x4r=hround(w-1.5u+.5curve);
y1-.5stem=-d-o; y2=y4=y6=.5[y3,y5]; top y3r=h+oo; bot y5r=-oo;
filldraw circ_stroke z1e..pulled_arc.e(2,3) & pulled_arc.e(3,4)
 & pulled_arc.e(4,5) & pulled_arc.e(5,6);  % stem and bowl
math_fit(desc_depth#*slant+.5stem#-u#,ic#);
penlabels(1,2,3,4,5,6); endchar;

cmchar "Lowercase Greek sigma";
beginchar(oct"221",10.25u#,x_height#,0);
italcorr x_height#*slant+.5stem#-u#;
adjust_fit(0,0); pickup fine.nib;
pos1(vstem,90); pos2(stem,0); pos3(vair,-90);
pos4(stem,-180); pos5(vstem,-270); pos6(vstem,-270);
x1=x3=x5=.5[x2,x4]; rt x2r=hround(w-2.5u);
lft x4r=hround(1.5u-.5curve);x6=w-1.5u;
top y1r=h; y2=y4=.5[y1,y3]; bot y3r=-oo; y5=y6=y1;
filldraw circ_stroke z6e..pulled_arc.e(5,4) & pulled_arc.e(4,3)
 & pulled_arc.e(3,2) & pulled_arc.e(2,1);  % ear and bowl
math_fit(-.3x_height#*slant+.5curve#-u#,ic#-1/3x_height#*slant);
penlabels(1,2,3,4,5,6); endchar;

cmchar "Lowercase Greek tau";
beginchar(oct"222",9u#,x_height#,0);
italcorr x_height#*slant+.5stem#-u#;
adjust_fit(0,0); pi_stroke; % hook and bar
pos4(hair,0); pos5(stem,0);
x4=x5; x5-.5stem=hround(.5w-.5u-.5stem); y4=y2; y5-.5stem=-oo;
filldraw circ_stroke z5e--z4e;  % stem
math_fit(-.7x_height#*slant+.5hair#+.5u#,-.5u#);
penlabels(1,2,3,4,5); endchar;

cmchar "Lowercase Greek upsilon";
beginchar(oct"223",9u#,x_height#,0);
italcorr x_height#*slant;
adjust_fit(0,0); pickup fine.nib; interim superness:=more_super;
x0=0; x2=x3+.25u; pos3(stem,-180); lft x3r=hround(2.5u-.5stem);
hook_in(0,1,2)(skewed);  % opening hook
pos2'(stem,-180); z2'=z2; pos4(vair,-90); pos5(hair,0);
x4=.5w+u; rt x5r=hround(w-.5u); y3=.7[y4,y5]; bot y4r=-oo; y5=.57h;
filldraw stroke z2'e{-u,-x_height}...super_arc.e(3,4)
 ..tension atleast 1.05..{up}z5e; % left stem and arc
v_bulb(5,6);  % closing bulb
math_fit(-2/3x_height#*slant+.5hair#+.5u#,2/3ic#);
penlabels(0,1,2,3,4,5,6); endchar;

cmchar "Lowercase Greek phi";
beginchar(oct"224",11u#,asc_height#,desc_depth#);
italcorr .7x_height#*slant+.5curve#-u# if math_fitting:-.5u# fi;
adjust_fit(0,0); pickup fine.nib;
numeric light_curve; light_curve=hround(.5[stem,curve]-2stem_corr);
pos1(vair,90); pos2(light_curve,180); pos3(vair,270); pos4(light_curve,360);
x1=x3=.5w; lft x2r=hround(1.5u-.5light_curve); x4=w-x2;
top y1=x_height+oo; y2=y4=.5[y1,y3]; bot y3=-oo;
filldraw stroke pulled_arc.e(1,2) & pulled_arc.e(2,3)
 & pulled_arc.e(3,4) & pulled_arc.e(4,1); % bowl
pos5(hair,0); pos6(hair,0); x5=x6=.5w; top y5=h; bot y6=-d-oo;
filldraw stroke z5e--z6e;  % stem
math_fit(-.3x_height#*slant+.5curve#-u#,ic#);
penlabels(1,2,3,4,5,6); endchar;

cmchar "Lowercase Greek chi";
beginchar(oct"225",11u#,x_height#,desc_depth#);
italcorr x_height#*slant+.5hair#-1.5u#;
adjust_fit(0,0); pickup fine.nib;
pos1(hair,180); pos2(vair,80); pos5(vair,80); pos6(hair,180);
x1-.5hair=hround-.5hair; x6=w-x1; x2=w-x5=u;
y1=y2l-h/8; top y2r=h+oo; bot y5l=-d-oo; y6=y5r+h/8;
z0=.5[z2,z5]; z2'=z2l+(.5u,0); z5'=z5r-(.5u,0);
numeric theta; theta=angle(z5'-z2')+90;
pos3(stem,theta); pos4(stem,theta);
y3r=y2r-h/8; y4l=y5l+h/8; z3l=whatever[z2',z0]; z4r=whatever[z0,z5'];
filldraw stroke z1e{up}...z2e{right}...z3e{z4r-z3l}
 ..z4e{z4r-z3l}...{right}z5e...{up}z6e;  % major diagonal and hooks
x8=w-x7=2u; y7+.5hair=h; y8-.5hair=-d;
numeric theta; theta=angle(z7-z8)-90;
pos7(hair,theta); pos8(hair,theta);
filldraw z7l---z8l..z8r---z7r..cycle;  % minor diagonal
math_fit((desc_depth#-x_height#)*slant+ic#,ic#);
penlabels(0,1,2,2',3,4,5',5,6,7,8); endchar;

cmchar "Lowercase Greek psi";
beginchar(oct"226",11u#,asc_height#,desc_depth#);
italcorr x_height#*slant;
adjust_fit(0,0); pickup fine.nib; interim superness:=more_super;
x0=0; x2=x3+.25u; pos3(stem,-180); lft x3r=hround(2.5u-.5stem);
hook_in(0,1,2)(skewed);  % opening hook
pos2'(stem,-180); z2'=z2; pos4(vair,-90); pos5(hair,0);
x4=.5w+u; rt x5r=hround(w-.5u);
y3=.7[y4,y5]; bot y4r=-oo; y5=.57x_height;
filldraw stroke z2'e{-u,-x_height}...super_arc.e(3,4)
 ..tension atleast 1.05..{up}z5e; % left stem and arc
v_bulb(5,6);  % closing bulb
pos7(hair,0); pos8(hair,0); x7=x8=.5w+.5u; top y7=h; bot y8=-d-oo;
filldraw stroke z7e--z8e;  % stem
math_fit(-2/3x_height#*slant+.5hair#+.5u#,2/3ic#);
penlabels(0,1,2,3,4,5,6,7,8); endchar;

cmchar "Lowercase Greek omega";
beginchar(oct"227",11u#,x_height#,0);
italcorr x_height#*slant;
adjust_fit(0,0); pickup fine.nib;
pos2(hair,-180); lft x2r=hround.5u; y2=y4=y6=y8=bar_height;
y1+.5hair=h; x1=x2+.75u; pos1(hair,angle(2(x1-x2),y1-y2)+90);
pos3(vstem+dw,-90); pos4(hair,0); pos5(vair,90);
pos6(hair,180); pos7(vstem+dw,270); pos8(hair,360);
bot y3r=bot y7r=-oo; top y5r=vround(.2[y4,h]+.5vair);
x3=.5[x2,x4]; x7+.25u=.5[x6,x8]; rt x8r=hround(w-.5u);
x5+.5stem=hround(.5w+.5stem)+eps;
x5=.5[x4,x6]; rt x4r-lft x6r=min(stem,2hair)+2eps;
if x4l<x6l: x4l:=x6l:=x5; fi
filldraw circ_stroke z1e{2(x2-x1),y2-y1}...z2e{down}...z3e{right}
 ...{up}z4e...{left}z5e;  % left arc
filldraw stroke z5e{left}...z6e{down}...z7e{right}...{up}z8e;  % right arc
v_bulb(8,9);  % closing bulb
math_fit(-bar_height#*slant,2/3ic#); penlabels(1,2,3,4,5,6,7,8,9); endchar;

cmchar "Variant lowercase Greek epsilon";
beginchar(oct"231",8u#,x_height#,0);
italcorr x_height#*slant-.5u#;
adjust_fit(0,0); pickup fine.nib;
numeric light_vstem; light_vstem=Vround 2/3[vair,vstem];
pos2(light_vstem,90); x2=x8=.5w+.5u; top y2r=h+o;
x1+.5light_vstem=hround(w-u); y1=.2[y2,bar_height];
pos1(light_vstem,angle(x1-x2,2(y1-y2))+90); pos3(hair,180); pos4(vair,270);
pos5(hair,360); pos6(vair,450); pos7(hair,540); pos8(light_vstem,630);
lft x3r=hround u; x4=x6=.5w; rt x5r=hround(w-2.5u); x7=x3;
y3=.5[y2,y4]; y5=bar_height=.5[y4,y6]; y7=.5[y6,y8]; bot y8r=-o;
top y6r-bot y4r=vstem+eps; if y6l<y4l: y6l:=y4l:=y5; fi
x9+.5vair=hround(w-.5u); y9=1/3[y8,bar_height];
pos9(vair,angle(x8-x9,2(y8-y9))+90);
filldraw circ_stroke z1e{x2-x1,2(y2-y1)}...pulled_super_arc.e(2,3)(.5superpull)
 & super_arc.e(3,4)...{up}z5e;  % upper arc
filldraw circ_stroke z9e{x8-x9,8(y8-y9)}...pulled_arc.e(8,7)
 & super_arc.e(7,6)...{down}z5e;  % lower arc
math_fit(-.5bar_height#*slant-.5u#,ic#);
penlabels(1,2,3,4,5,6,7,8,9); endchar;

cmchar "Variant lowercase Greek theta";
beginchar(oct"232",9u#,asc_height#,0);
italcorr .5[bar_height#,x_height#]*slant+.5vair#+.5u#;
adjust_fit(0,0); pickup fine.nib;
numeric light_curve; light_curve=hround .5[stem,curve];
x0=0; x2-.5stem=hround(2.5u-.5stem); hook_in(0,1,2);  % opening hook
pos2'(stem,-180); z2'=z2; pos3(stem,-180); pos4(vair,-90);
pos5(light_curve,0); pos6(vair,90); pos7(hair,180); pos8(vair,270);
x3=x2; x4=x6=.5[x3,x5]; rt x5r=hround(w-1.5u+.5light_curve);
lft x7r=hround(3.25u-.5hair); x8+.5vair=hround(w+.5vair-epsilon);
y3=.4x_height; bot y4r=-oo; y5=.5[y4,y6]; top y6r=h+oo;
y7=.5[x_height,h]; y8=.5[bar_height,x_height];
filldraw stroke z2'e..{{interim superness:=hein_super; super_arc.e(3,4)}}
 & pulled_arc.e(4,5) & pulled_arc.e(5,6)
 ...{down}z7e...{4(x8-x7),y8-y7}z8e;  % bowl and loop
math_fit(-2/3x_height#*slant+.5hair#+.5u#,ic#);
penlabels(0,a,1,2,3,4,5,6,7,8); endchar;

cmchar "Variant lowercase Greek pi";
beginchar(oct"233",14.5u#,x_height#,0);
italcorr x_height#*slant+.5stem#-u#;
adjust_fit(0,0); pi_stroke; % hook and bar
pos4(hair,-180); pos5(hair,-180); pos6(vstem,-90);
pos7(hair,0); pos7'(hair,-180); z7'=z7;
pos8(vstem,-90); pos9(hair,0); pos0(hair,0);
x4=x5+1.5u; lft x5r=hround 2u; x6=x4+.5u; lft x7l=hround(.5w+.25u-.5hair);
x8=w-4.5u; rt x9r=hround(w-1.5u); x0=x9-1.25u;
top y4=top y0=h; y5+.1h=y7-.1h=y9=bar_height; bot y6r=bot y8r=-oo;
filldraw stroke z4e{2(x5-x4),y5-y4}...z5e{down}
 ...z6e{right}...z7e{up};  % left bowl
filldraw stroke z0e{2(x9-x0),y9-y0}...z9e{down}
 ...z8e{left}...z7'e{up};  % right bowl
math_fit(-.7x_height#*slant+.5hair#+.5u#,ic#-.5u#);
penlabels(0,1,2,3,4,5,6,7,8,9); endchar;

cmchar "Variant lowercase Greek rho";
beginchar(oct"235",8.25u#,x_height#,desc_depth#);
italcorr .7x_height#*slant+.5curve#-u# if math_fitting:-.5u# fi;
adjust_fit(0,0); pickup fine.nib;
pos2(stem,180); pos3(vair,90); pos4(curve,0); pos5(vair,-90); pos6(stem,-180);
lft x2r=hround(1.5u-.5stem); x2=x6; x3=x5=.5[x2,x4];
rt x4r=hround(w-1.5u+.5curve);
y2=y4=y6=.5[y3,y5]; top y3r=h+oo; bot y5r=-oo;
filldraw circ_stroke pulled_arc.e(2,3) & pulled_arc.e(3,4)
 & pulled_arc.e(4,5) & pulled_arc.e(5,6);  % bowl
pos2'(hair,-180); z2'r=z2r; pos1(vstem,-90); pos1'(vstem,90); z1'=z1;
pos0(hair,0); rt x0r=hround(w-u); bot y0=-d; bot y1r=vround-.9d; x1=x5;
interim superness:=sqrt superness;
filldraw stroke pulled_arc.e(0,1'); filldraw stroke pulled_arc.e(1,2'); % tail
math_fit(desc_depth#*slant+.5stem#-u#,ic#);
penlabels(0,1,2,3,4,5,6); endchar;

cmchar "Variant lowercase Greek sigma";
beginchar(oct"240",8u#,x_height#,.5min(desc_depth#,.5x_height#));
italcorr x_height#*slant-.5u#;
adjust_fit(0,0); pickup fine.nib;
numeric heavy_vair; heavy_vair=.25[vair,vstem];
pos1(heavy_vair,-110); pos2(vair,-90);
x1+.5heavy_vair=hround(w-u); y1=.1[y2r,bar_height];
x2=min(.5w+u,x1r-eps); top y2l=h+oo;
filldraw circ_stroke z1e{x2-x1,2(y2-y1)}...{left}z2e;  % upper bulb
numeric theta; theta=90-angle(16u,x_height); slope:=-x_height/16u;
pos6(stem,theta); pos7(vair,-90); pos8(vair,-135);
lft x4l=hround u; x4r-x4l=(hround .5[vair,stem])-fine;
x6=x7=w-2u; x8=.5w+u; y6=.25[y8,y2]; y8=y7+1/8d; bot y7r=-d-oo;
ellipse_set(2l,4l,5l,6l); ellipse_set(2r,4r,5r,6r); y4=y4r;
filldraw circ_stroke z8e{x7-x8,2(y7-y8)}...z7e{right}...z6e
 ---z5e...{up}z4e...{right}z2e;  % main stroke
math_fit(-.5x_height#*slant-.5u#,0); penlabels(1,2,4,5,6,7,8); endchar;

cmchar "Variant lowercase Greek phi";
beginchar(oct"241",11u#,x_height#,desc_depth#);
italcorr .7x_height#*slant;
adjust_fit(0,0); pickup fine.nib;
pos1(hair,-180); x1=x2+.75u; top y1=h;
pos2(hair,-180); lft x2r=hround .5u; y2=bar_height;
pos3(vstem,-90); x3=.5(w+u); bot y3r=-oo;
pos4(hair,0); rt x4r=hround(w-.5u); y4=y2;
pos5(vstem,90); x5=.52[x6,x4]; top y5r=h+oo;
pos6(hair,180); x6=x7; y6=1/3h;
pos7(stem,180); lft x7r=hround(.5w-.5u-.5stem); y7-.5stem=-d-o;
filldraw circ_stroke z7e---z6e...{right}z5e...{down}z4e...{left}z3e
 ...{up}z2e...{3(x1-x2),y1-y2}z1e;  % bowl and stem
math_fit(-.3x_height#*slant,ic#); penlabels(1,2,3,4,5,6,7); endchar;

if ligs>1: input romlig; fi  % letter ligatures
if ligs>0: input comlig; fi  % ligatures common with italic text
if ligs<=1: input romsub; fi  % substitutes for ligatures

ligtable "!": "`" =: spanish_shriek;
ligtable "?": "`" =: spanish_query;
font_slant slant; font_x_height x_height#;
if monospace: font_normal_space 9u#; % no stretching or shrinking
 font_quad 18u#;
 font_extra_space 9u#;
else: font_normal_space 6u#+2letter_fit#;
 font_normal_stretch 3u#; font_normal_shrink 2u#;
 font_quad 18u#+4letter_fit#;
 font_extra_space 2u#;

 k#:=-.5u#; kk#:=-1.5u#; kkk#:=-2u#; % three degrees of kerning

% the following kerns should have been added:
%  - between opening quotes and some letters
%  - between |"."| and |"."| (...)
%  - between |"A"| and |"v"| (Average)
%  - between |"A"| and |"w"| (Awkward or Lem's Awruk)
%  - between |"F"|, |"P"|, |"T"|, |"V"|, |"W"|, |"Y"| and |"."|, |","|
% but for the sake of compatibility with CM's they would have been
% inserted only if |improve_kerns=true| (by default |improve_kerns=true|).

if improve_kerns: ligtable ".": "." kern -kkk#; fi
 ligtable "k": if serifs: "v":
 if improve_kerns:
           "a" kern k#, cs_aa kern k#,
           cs_ae kern k#, cs_ax kern k#,
 else:
           "a" kern -u#, cs_aa kern -u#,
           cs_ae kern -u#, cs_ax kern -u#,
 fi fi\\"w":
           "e" kern k#, cs_ee kern k#, cs_ie kern k#,
           "a" kern k#, cs_aa kern k#, cs_ae kern k#, cs_ax kern k#,
           "o" kern k#, cs_oo kern k#, cs_uo kern k#, cs_oe kern k#,
           "c" kern k#, cs_cz kern k#;
 ligtable "P":
 if improve_kerns: "." kern k#, "," kern k#, fi
          "A" kern kk#, cs_AA kern kk#, cs_AX kern kk#,  cs_AE kern kk#,
          "y": cs_yy:
               "o" kern k#, cs_oo kern k#, cs_uo kern k#, cs_oe kern k#,
               "e" kern k#, cs_ee kern k#, cs_ie kern k#,
               "a" kern k#, cs_aa kern k#, cs_ae kern k#, cs_ax kern k#,
               "." kern kk#, "," kern kk#;
 ligtable "F": "V": "W":
 if improve_kerns: "." kern -u#, "," kern -u#, fi
            if serifs:
               "o" kern kk#, cs_oo kern kk#, cs_ou kern kk#, cs_oe kern kk#,
               "e" kern kk#, cs_ee kern kk#, cs_ie kern kk#,
               "u" kern kk#, cs_uu kern kk#, cs_ue kern kk#, cs_ou kern kk#,
               "r" kern kk#, cs_rz kern kk#, cs_rr kern kk#,
               "a" kern kk#, cs_aa kern kk#, cs_ae kern kk#, cs_ax kern kk#,
               "A" kern kkk#, cs_AA kern kkk#,
                 cs_AE kern kkk#, cs_AX kern kkk#,
           else: "o" kern k#, cs_oo kern k#, cs_ou kern k#, cs_oe kern k#,
               "e" kern k#, cs_ee kern k#, cs_ie kern k#,
               "u" kern k#, cs_uu kern k#, cs_ue kern k#, cs_ou kern k#,
               "r" kern k#, cs_rz kern k#, cs_rr kern k#,
               "a" kern k#, cs_aa kern k#, cs_ae kern k#, cs_ax kern k#,
               "A" kern kk#, cs_AA kern kk#,
                 cs_AE kern kk#, cs_AX kern kk#,
           fi
           "K": "X": "O" kern k#, cs_OO kern k#,
                 cs_UO kern k#, cs_OE kern k#,
               "C" kern k#, cs_CZ kern k#,
               "G" kern k#, "Q" kern k#;
 ligtable "T": cs_TJ : if serifs: "y" kern k#, cs_yy kern k#
                               else: "y" kern kk#, cs_yy kern kk# fi,
          "Y": cs_YY:
               "e" kern kk#, cs_ee kern kk#, cs_ie kern kk#,
               "o" kern kk#, cs_oo kern kk#, cs_ou kern kk#, cs_oe kern kk#,
               "r" kern kk#, cs_rz kern kk#, cs_rr kern kk#,
               "a" kern kk#, cs_aa kern kk#, cs_ae kern kk#, cs_ax kern kk#,
               "A" kern kk#, cs_AA kern kk#,
                 cs_AE kern kk#, cs_AX kern kk#,
               "u" kern kk#, cs_uu kern kk#, cs_ue kern kk#,
                  cs_ou kern kk#
                if improve_kerns:, "." kern k#, "," kern k# fi;
 ligtable "O": cs_OO: "D": cs_DJ:
               "X" kern k#, "W" kern k#,
               "A" kern k#, cs_AA kern k#, cs_AE kern k#,
                   cs_AX kern k#,
               "V" kern k#, "Y" kern k#, cs_YY kern k#;
 if serifs: ligtable "h": "m": "n": cs_nj:
               "t" kern k#, cs_tj kern k#,
               "u" kern k#, cs_uu kern k#, cs_ue kern k#, cs_ou kern k#,
               "b" kern k#, "y" kern k#, cs_yy kern k#,
               "v" kern k#, "w" kern k#;
 ligtable "c": cs_cz: "h" kern k#, "k" kern k#; fi
 ligtable "o": cs_oo: cs_uo: cs_oe: "b": "p":
               "e" kern -k#, cs_ee kern -k#, cs_ie kern -k#,
               "o" kern -k#, cs_oo kern -k#, cs_ou kern -k#, cs_oe kern -k#,
               "x" kern k#, "d" kern -k#, cs_dj kern -k#,
               "c" kern -k#, cs_cz kern -k#, "q" kern -k#,
          "a": cs_aa: cs_ae: cs_ax:
          if serifs: "v" kern k#, "j" kern u#,
          else: "r" kern k#, cs_rr kern k#, cs_rz kern k#, fi
          "t": cs_tj: "y" kern k#, cs_yy kern k#,
          "u": cs_uu: cs_ou: cs_ue: "w" kern k#;
 ligtable "A": cs_AA: cs_AE: cs_AX:
 if improve_kerns:
  "v" kern if serifs: kkk# else: k# fi, "w" kern if serifs: kk# else: k# fi,
 fi
          if serifs: "R": cs_RZ: cs_RR: fi\\
               "t" kern k#, cs_tj kern k#,
               "C" kern k#, cs_CZ kern k#,
               "O" kern k#, cs_OO kern k#, cs_UO kern k#,
                   cs_OE kern k#,
               "G" kern k#,
               "U" kern k#, cs_UU kern k#, cs_OU kern k#,
                   cs_UE kern k#,
               "Q" kern k#,
          "L": cs_LJ: cs_LL:
               "T" kern kk#, cs_TJ kern kk#,
               "Y" kern kk#, cs_YY kern kk#,
               "V" kern kkk#, "W" kern kkk#;
 ligtable "g": "j" kern -k#; % logjam
 ligtable "I": "I" kern -k#;  % Richard III
 % there are ligature/kern programs for |"f"| in the {\tt romlig} file
 % and for |"-"|, |"`"|, and |"'"| in the {\tt comlig} file

if improve_kerns:
ligtable opening_quotes:
 "g" kern -k#, "j" kern -kkk#, "p" kern -k#, "y" kern u#, cs_yy kern u#,
 "v" kern k#, "w" kern k#,
 if serifs:
  "A" kern u#, cs_AA kern u#, cs_AE kern u#,
  "C" kern u#, cs_CZ kern u#, "D" kern u#, cs_DJ kern u#,
  "E" kern u#, cs_EE kern u#, cs_IE kern u#, "F" kern u#, "H" kern u#,
  "I" kern u#, cs_II kern u#, "J" kern u#, "K" kern u#,
  "L" kern u#, cs_LJ kern u#,
  "M" kern u#, "N" kern u#, cs_NJ kern u#, "P" kern u#,
  "R" kern u#, cs_RZ kern u#, cs_RR kern u#, "S" kern u#, cs_SH kern u#,
  "T" kern k#, cs_TJ kern k#, "X" kern u#,
  "Y" kern k#, cs_YY kern k#, "Z" kern u#, cs_ZH kern u#,
 else:
  "T" kern kk#, cs_TJ kern kk#, "Y" kern kk#, cs_YY kern kk#,
 fi
 "V" kern kk#, "W" kern k#;
fi
fi

bye.
